#!/bin/bash

set -e

readonly GH_URL="https://api.github.com/"
readonly GH_TOKEN="$(git config --get hub.oauthtoken)"
readonly GH_USER="$(git config --get hub.user)"
readonly CURL_OPTS="--tlsv1.2 -#"

readonly DEFAULT_AUTO_INIT=true
readonly DEFAULT_LICENCE=mit
readonly DEFAULT_HAS_WIKI=false
readonly DEFAULT_HAS_DOWNLOADS=false
readonly DEFAULT_HAS_ISSUES=true
readonly DEFAULT_PRIVATE=false


err() {
    echo $@
    exit 2
}

netrc() {
    cat <<EOF
    machine $(echo "$GH_URL" | awk -F/ '{print $3}')
    login $GH_USER
    password $GH_TOKEN
EOF
}

http() {
    curl --netrc-file <(netrc) $CURL_OPTS $@
    return $?
}

http-get() {
    http $GH_URL$@
    return $?
}

http-post() {
    http -X POST $GH_URL$@ -d @-
    return $?
}

http-delete() {
    http -X DELETE $GH_URL$@
    return $?
}

http-head() {
    http $GH_URL$@ --head
    return $?
}

repo-exists() {
    # If the repo doesn't exist we'll get an error from http-head
    (http-head "repos/$GH_USER/$1" --fail 2>&1>/dev/null)#2&> /dev/null)
    return $?
}

repo-create() {
    # name, description, licence_template, auto_init, private
    if (( $# < 1 )) ; then
        err "Not enough arguments"
    fi
    local name=$1
    local description=$2
    local licence_template=${3:-$DEFAULT_LICENCE}
    local auto_init=${4:-$DEFAULT_AUTO_INIT}
    local private=${5:-$DEFAULT_PRIVATE}

    if repo-exists "$name"; then
        >&2 echo "$name already exists"
        return 3
    fi

    cat <<NEW_GH_REPO | http-post user/repos
    {
        "name": "$name",
        "description": "$description",
        "licence_template": "$licence_template",
        "gitignore_template": "",
        "auto_init": $auto_init,
        "has_downloads": false,
        "has_wiki": false,
        "has_issues": true,
        "private": $private
    }
NEW_GH_REPO
}

repo-delete() {
    if (( $# < 1 )) ; then
        err "Not enough arguments"
    fi
    local name=$1
    if ! repo-exists "$name"; then
        echo >&2 "$name does not exist"
        return 1
    fi

    http-delete repos/$GH_USER/$name
}

usage() {
    echo
    exit $1
}

case "$1" in
    add )
        shift
        repo-create $@
        exit
        ;;
    rm )
        shift
        repo-delete $@
        exit
        ;;
    *)
        usage
        ;;
esac

